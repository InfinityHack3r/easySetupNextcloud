---
# Nextcloud + Cloudflare Tunnel Deployment with Ansible
# Supports both Rocky Linux (Podman) and Debian/Ubuntu (Docker)
- name: Deploy Nextcloud + Cloudflare Tunnel
  hosts: nextcloud_servers
  become: true
  gather_facts: true

  vars:
    # --- Project Configuration ---
    project_dir: /opt/nextcloud
    compose_project_name: nextcloud
    service_name: nextcloud-stack

    # --- Domain & Cloudflare ---
    domain_public: cloud.example.com
    tunnel_token: "REPLACE_WITH_YOUR_CLOUDFLARE_TUNNEL_TOKEN"

    # --- Database Configuration ---
    postgres_db: nextcloud
    postgres_user: nextcloud
    postgres_password: "CHANGE_ME_DB_PASSWORD"

    # --- Nextcloud Versions ---
    nextcloud_version: 29
    postgres_version: 16
    redis_version: 7

    # --- Network Configuration ---
    network_subnet: "172.28.0.0/16"
    trusted_proxies: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"

    # --- Optional Features ---
    enable_local_test_port: false
    redis_password: ""

    # --- Distribution-specific variables (auto-detected) ---
    container_runtime: "{{ 'podman' if ansible_os_family == 'RedHat' else 'docker' }}"
    compose_command: "{{ 'podman-compose' if ansible_os_family == 'RedHat' else 'docker-compose' }}"
    use_service_user: "{{ ansible_os_family == 'RedHat' }}"
    service_user: nextcloudsvc

  pre_tasks:
    - name: Display detected OS information
      ansible.builtin.debug:
        msg: 
          - "Detected OS Family: {{ ansible_os_family }}"
          - "Distribution: {{ ansible_distribution }} {{ ansible_distribution_version }}"
          - "Container Runtime: {{ container_runtime }}"
          - "Compose Command: {{ compose_command }}"

    - name: Install packages for Rocky Linux/RHEL
      ansible.builtin.package:
        name:
          - podman
          - podman-compose
          - slirp4netns
          - fuse-overlayfs
        state: present
      when: ansible_os_family == 'RedHat'

    - name: Install Docker on Debian/Ubuntu
      block:
        - name: Update package index
          ansible.builtin.apt:
            update_cache: true

        - name: Install prerequisites
          ansible.builtin.package:
            name:
              - ca-certificates
              - curl
              - gnupg
              - lsb-release
            state: present

        - name: Add Docker GPG key
          ansible.builtin.apt_key:
            url: https://download.docker.com/linux/ubuntu/gpg
            state: present

        - name: Add Docker repository
          ansible.builtin.apt_repository:
            repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
            state: present

        - name: Install Docker packages
          ansible.builtin.package:
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-buildx-plugin
              - docker-compose-plugin
            state: present

        - name: Install Docker Compose standalone
          ansible.builtin.get_url:
            url: "https://github.com/docker/compose/releases/latest/download/docker-compose-{{ ansible_system }}-{{ ansible_architecture }}"
            dest: /usr/local/bin/docker-compose
            mode: '0755'

        - name: Enable and start Docker
          ansible.builtin.systemd:
            name: docker
            enabled: true
            state: started

        - name: Add ansible user to docker group
          ansible.builtin.user:
            name: "{{ ansible_user }}"
            groups: docker
            append: true

      when: ansible_os_family == 'Debian'
    - name: Create service account for Rocky Linux (Podman rootless)
      block:
        - name: Ensure service account exists
          ansible.builtin.user:
            name: "{{ service_user }}"
            system: true
            shell: /usr/sbin/nologin
            create_home: true
            state: present

        - name: Enable lingering for service account
          ansible.builtin.command:
            cmd: "loginctl enable-linger {{ service_user }}"
          register: linger_cmd
          changed_when: linger_cmd.rc == 0
      when: use_service_user

    - name: Create project directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ service_user if use_service_user else 'root' }}"
        group: "{{ service_user if use_service_user else 'root' }}"
        mode: "0755"
      loop:
        - "{{ project_dir }}"
        - "{{ project_dir }}/data/postgres"
        - "{{ project_dir }}/data/redis"
        - "{{ project_dir }}/data/nextcloud"

  tasks:
    - name: Render docker-compose.yml
      ansible.builtin.template:
        src: templates/docker-compose.yml.j2
        dest: "{{ project_dir }}/docker-compose.yml"
        owner: "{{ service_user if use_service_user else 'root' }}"
        group: "{{ service_user if use_service_user else 'root' }}"
        mode: "0644"

    - name: Render systemd service unit
      ansible.builtin.template:
        src: templates/nextcloud-stack.service.j2
        dest: "/etc/systemd/system/{{ service_name }}.service"
        mode: "0644"
      notify: systemd daemon-reload

    - name: Start and enable systemd service
      ansible.builtin.systemd:
        name: "{{ service_name }}"
        enabled: true
        state: started
        daemon_reload: true

  handlers:
    - name: systemd daemon-reload
      ansible.builtin.systemd:
        daemon_reload: true
