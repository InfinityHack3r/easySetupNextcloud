---
# --- Detect SELinux (affects :Z binds) ---
- name: Detect SELinux status
  ansible.builtin.command: getenforce
  register: _getenforce
  changed_when: false
  failed_when: false

- name: Set SELinux fact
  ansible.builtin.set_fact:
    selinux_enabled: "{{ selinux_enabled
      if selinux_enabled is not none
      else (_getenforce.stdout | default('Disabled')) not in ['Disabled','Permissive',''] }}"

# --- Detect runtimes present ---
- name: Check docker binary
  ansible.builtin.command: bash -lc 'command -v docker'
  register: _has_docker_cmd
  changed_when: false
  failed_when: false

- name: Check podman binary
  ansible.builtin.command: bash -lc 'command -v podman'
  register: _has_podman_cmd
  changed_when: false
  failed_when: false

- name: Presence facts
  ansible.builtin.set_fact:
    docker_present: "{{ _has_docker_cmd.rc == 0 }}"
    podman_present: "{{ _has_podman_cmd.rc == 0 }}"

# --- Resolve runtime (auto -> prefer docker, else podman) ---
- name: Resolve container runtime
  ansible.builtin.set_fact:
    container_runtime_resolved: >-
      {{
        (container_runtime != 'auto') | ternary(
          container_runtime,
          docker_present | ternary('docker', podman_present | ternary('podman', preferred_runtime))
        )
      }}

# --- Install runtime (Debian/Ubuntu) ---
- name: Install Docker (Debian/Ubuntu)
  when:
    - container_runtime_resolved == 'docker'
    - not docker_present
    - ansible_os_family == 'Debian'
  ansible.builtin.apt:
    name: [docker.io, docker-compose-plugin]
    state: present
    update_cache: true

- name: Install Podman (Debian/Ubuntu)
  when:
    - container_runtime_resolved == 'podman'
    - not podman_present
    - ansible_os_family == 'Debian'
  ansible.builtin.apt:
    name: [podman, podman-compose]
    state: present
    update_cache: true

# --- Install runtime (RHEL family) ---
- name: Install Docker (RHEL family)
  when:
    - container_runtime_resolved == 'docker'
    - not docker_present
    - ansible_os_family == 'RedHat'
  ansible.builtin.yum:
    name: [docker, docker-compose-plugin]
    state: present

- name: Install Podman (RHEL family)
  when:
    - container_runtime_resolved == 'podman'
    - not podman_present
    - ansible_os_family == 'RedHat'
  ansible.builtin.yum:
    name: [podman, podman-compose]
    state: present

# --- Enable docker service if used ---
- name: Enable & start Docker
  when: container_runtime_resolved == 'docker'
  ansible.builtin.service:
    name: docker
    enabled: true
    state: started

# Rootless Podman convenience
- name: Enable lingering for service user (rootless Podman)
  when:
    - container_runtime_resolved == 'podman'
    - use_service_user | bool
  ansible.builtin.command: "loginctl enable-linger {{ service_user }}"
  changed_when: false
  failed_when: false

# --- Compose command selection ---
- name: Set compose_command (default for resolved runtime)
  ansible.builtin.set_fact:
    compose_command: >-
      {{
        container_runtime_resolved == 'docker'
        | ternary(docker_compose_command, podman_compose_command)
      }}

# Prefer `docker compose` subcommand if available
- name: Check if `docker compose` subcommand exists
  when: container_runtime_resolved == 'docker'
  ansible.builtin.command: bash -lc 'docker compose version'
  register: _dc_subcmd
  changed_when: false
  failed_when: false

- name: Use `docker compose` if subcommand works, else fallback to `docker-compose`
  when: container_runtime_resolved == 'docker'
  ansible.builtin.set_fact:
    compose_command: "{{ (_dc_subcmd.rc == 0) | ternary('docker compose', 'docker-compose') }}"
